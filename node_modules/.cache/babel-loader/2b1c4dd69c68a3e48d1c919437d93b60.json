{"ast":null,"code":"import _classCallCheck from \"/home/atemengue/Documents/WebApp/app-base/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/atemengue/Documents/WebApp/app-base/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/atemengue/Documents/WebApp/app-base/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/atemengue/Documents/WebApp/app-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/atemengue/Documents/WebApp/app-base/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/atemengue/Documents/WebApp/app-base/src/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamCreate, _Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      console.log(meta);\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return StreamCreate;\n}(Component);\n\nvar validate = function validate(values) {\n  var errors = {};\n\n  if (!values.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!values.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate); // return <input  \n// onChange={formProps.input.onChange}\n// value={formProps.input.value}\n// />","map":{"version":3,"sources":["/home/atemengue/Documents/WebApp/app-base/src/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","input","label","meta","console","log","formValues","props","handleSubmit","onSubmit","renderInput","validate","values","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEOC,Y;;;;;;;;;;;;;sCAC6B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,KAAc,QAAdA,KAAc;AAAA,UAAPC,IAAO,QAAPA,IAAO;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAMD;;;6BAEQK,U,EAAY;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACD;;;6BACQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAjB;AAAyD,QAAA,SAAS,EAAC,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CADF;AASD;;;;EAxByBb,S;;AA2B5B,IAAMc,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM,EAAI;AACzB,MAAMC,MAAM,GAAG,EAAf;;AACA,MAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,MAAG,CAACF,MAAM,CAACG,WAAX,EAAwB;AACtBF,IAAAA,MAAM,CAACE,WAAP,GAAoB,8BAApB;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;;AAaA,eAAgBd,SAAS,CAAC;AACxBiB,EAAAA,IAAI,EAAE,cADkB;AAExBL,EAAAA,QAAQ,EAARA;AAFwB,CAAD,CAAT,CAGbX,YAHa,CAAhB,C,CAMA;AACI;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\n class StreamCreate extends Component {\n  renderInput({input, label, meta}) {\n    console.log(meta)\n    return(\n      <div className=\"field\">\n        <label>{label}</label>\n        <input {...input} />\n      </div>\n    ) \n  }\n\n  onSubmit(formValues) {\n    console.log(formValues)\n  }\n  render() {\n    return (\n      <div>\n        <form  onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n          <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n          <Field name=\"description\" component={this.renderInput} label=\"Enter description\"/>\n          <button className=\"ui button primary\">Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n  if (!values.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if(!values.description) {\n    errors.description =\"You must enter a description\"\n  }\n  return errors\n}\n\n\nexport default  reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\n\n\n// return <input  \n    // onChange={formProps.input.onChange}\n    // value={formProps.input.value}\n    // />"]},"metadata":{},"sourceType":"module"}